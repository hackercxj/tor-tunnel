worker_processes  16;        #nginx worker 数量
error_log /usr/local/openresty/nginx/logs/error.log;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

stream {
    lua_shared_dict current_port 64k;

    # 获取环境变量的值
    init_by_lua_block {
        ngx.shared.current_port:set("port", 9050)
        _G.TorInstanceNum = os.getenv("TorInstanceNum")
    }
    ## TCP 代理日志格式定义
    log_format tcp_proxy '$remote_addr [$time_local] '
                         '$protocol $status $bytes_sent $bytes_received '
                         '$session_time "$upstream_addr" '
                         '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    ## TCP 代理日志配置
    access_log /usr/local/openresty/nginx/logs/access.log tcp_proxy;
    open_log_file_cache off;

    ## TCP 代理配置
    upstream backend{
        server 127.0.0.2:1101;# 爱写啥写啥  反正下面的代码也给你改了
        balancer_by_lua_block {
            -- 初始化balancer
            local balancer = require "ngx.balancer"
            local host = ""
            local port = 0
            host = ngx.ctx.proxy_host
            port = ngx.ctx.proxy_port
            -- 设置 balancer
            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the peer: ", err)
            end
        }
    }

    server {
        preread_by_lua_block {
            -- 增加端口循环逻辑
            local current_port = tonumber(ngx.shared.current_port:get("port"))
            local TorInstanceNum = _G.TorInstanceNum
            -- ngx.log(ngx.ERR, "tor进程数量: " .. _G.TorInstanceNum .. " 使用端口:" .. current_port)
            ngx.ctx.proxy_host = "127.0.0.1"
            ngx.ctx.proxy_port = current_port
            if current_port == 9050 + TorInstanceNum - 1 then
                current_port = 9050
            else
                current_port = current_port + 1
            end
            ngx.shared.current_port:set("port", current_port)
        }
        #  下面是本机的端口，也就是爬虫固定写死的端口
       listen 0.0.0.0:29000; #监听本机地址和端口，当使用keeplived的情况下使用keeplived VIP
       proxy_connect_timeout 3s;
       proxy_timeout 10s;
       proxy_pass backend; #这里填写对端的地址
    }
}